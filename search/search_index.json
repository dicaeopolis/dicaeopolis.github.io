{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230Dicaeopolis' Wiki.","text":"<p>\u672cWiki\u65e8\u5728\u63d0\u4f9b\u4e00\u4e2a\u4ea4\u6d41\u6280\u672f\u548c\u77e5\u8bc6\u7684\u5e73\u53f0\u3002</p> <p>\u6295\u7a3f\u8bf7\u53d1\u9001\u81f3\u7248\u4e3b\u90ae\u7bb1\u3002</p>"},{"location":"benchmark-on-stl/","title":"STL\u7684\u4e00\u4e9b\u6027\u80fd\u6d4b\u8bd5","text":"<p>\u4f17\u6240\u5468\u77e5 <code>regex</code> \u5e93\u50cf\u9a6c\u8f66\u4e00\u6837\u6162\uff0c\u800c <code>unrodered_map</code> \u4e5f\u5e38\u5e38\u56e0\u4e3a\u5e38\u6570\u8fc7\u5927\u800c\u88ab\u8bf8\u591a\u7b97\u6cd5\u7ade\u8d5b\u9009\u624b\u6240\u6452\u5f03\u3002\u4f46 <code>STL</code> \u5e76\u975e\u94c1\u677f\u4e00\u5757\uff0c\u603b\u4f1a\u6709\u4e00\u4e9b\u597d\u7528\u4e14\u6548\u7387\u9ad8\u7684\u5bb9\u5668\u503c\u5f97\u4e00\u7528\u3002\u672c\u6587\u8bd5\u56fe\u5bf9 <code>STL</code> \u4e2d\u7684\u4e00\u4e9b\u7ecf\u5178\u5bb9\u5668\u53ca\u7b97\u6cd5\u8fdb\u884c\u6027\u80fd\u6d4b\u8bd5\u4e0e\u5bf9\u6bd4\uff0c\u770b\u770b\u54ea\u4e9b\u8f6e\u5b50\u662f\u597d\u7528\u7684\u3002</p>"},{"location":"benchmark-on-stl/#_1","title":"\u6d4b\u8bd5\u5e73\u53f0\u548c\u6d41\u7a0b","text":"<p>\u672c\u6b21\u6d4b\u8bd5\u4f7f\u7528 Intel\u00ae Pentium\u00ae Gold 8505 @ 2.50GHz \u82af\u7247\uff0c\u673a\u5e26\u5185\u5b58 8GB\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e3a Windows 24H2 26100.3775 \uff0c\u7f16\u8bd1\u73af\u5883\u4e3a MSYS2 \uff0c\u7f16\u8bd1\u5668\u4f7f\u7528 clang 20.1.3 \u548c gcc 13.3.0\u3002</p> <p>\u5bf9\u6bcf\u4e00\u6b21\u6d4b\u8bd5\u53d6\u4e0d\u540c\u6570\u636e\u91cf\uff0c\u6bcf\u4e2a\u6570\u636e\u91cf\u9488\u5bf9\u4e0d\u540c\u7f16\u8bd1\u5668\u6d4b\u91cf\u591a\u6b21\u540e\u53d6\u5e73\u5747\u503c\u3002</p> <p>\u6d4b\u8bd5\u6570\u636e\u7531\u968f\u673a\u7b97\u6cd5\u751f\u6210\u5e76\u4fdd\u5b58\u3002\u4f8b\u5982\uff1a</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;random&gt;\n#include&lt;chrono&gt;\n\nint main()\n{\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    std::cout.tie(nullptr);\n    std::random_device device;\n    unsigned int seed = device();\n    std::mt19937 engine(seed);\n    int n;\n    std::cin &gt;&gt; n;\n    std::cout &lt;&lt; n;\n    while(n--)\n        std::cout&lt;&lt;engine()&lt;&lt;' ';\n    return 0;\n}\n</code></pre> <p>\u6d4b\u8bd5\u8ba1\u65f6\u4f7f\u7528\u4e0b\u9762\u7684\u811a\u672c\uff1a</p> <pre><code>import os\nimport time\nimport random\n\ndata_size = int(1e5)\ntest_round = 50\nsorces_filename = ['a', 'b', 'c']\ndatagen_path = 'datagen.exe'\ntestdata_filename = 'testdata.in'\noutput_filename = 'output.out'\n\nprint('[+] Cleaning directory.')\nos.system('find . -type f -name \"*.exe\" ! -name \"datagen.exe\" -exec rm -f {} +')\nos.system('rm *.in *.out')\n\n#compile\ngcc_instructions = [f'g++ -O2 -lm -o {fn}_gcc {fn}.cc' for fn in sorces_filename]\nclang_instructions = [f'clang++ -O2 -lm -o {fn}_clang {fn}.cc' for fn in sorces_filename]\ninstructions = gcc_instructions + clang_instructions\n\nprint('[+] Compiling files.')\nfor cmd in instructions:\n    print(f'  [+] Using command: {cmd}')\n    os.system(cmd)\n\ngcc_run_cmd = [(f'.\\\\{fn}_gcc &lt; {testdata_filename} &gt; {output_filename}', f'{fn}_gcc')\\\n                for fn in sorces_filename]\nclang_run_cmd = [(f'.\\\\{fn}_clang &lt; {testdata_filename} &gt; {output_filename}', f'{fn}_clang')\\\n                  for fn in sorces_filename]\nrun_cmds = gcc_run_cmd + clang_run_cmd\n\ntime_data = {}\nfor cmd in run_cmds:\n    time_data[cmd[1]] = 0\n\n#test\nfor round in range(test_round):\n    random.shuffle(run_cmds)\n    print(f'[+] Test round {round + 1}:')\n    print('[+] Cleaning directory.')\n    os.system('rm *.in *.out')\n    test_gen = f'({datagen_path} {data_size}) &gt; {testdata_filename}'\n    print('[+] Generating test data.')\n    os.system(test_gen)\n    for cmd in run_cmds:\n        run_cmd = cmd[0]\n        fn = cmd[1]\n        print(f'  [+] Start testing file {fn}...')\n        start_time = time.time()\n        os.system(run_cmd)\n        end_time = time.time()\n        elapsed_time_ms = int(1000 * (end_time - start_time))\n        print(f'  [-] Over. time usage: {elapsed_time_ms} ms')\n        time_data[cmd[1]] += elapsed_time_ms\n        #time.sleep(random.uniform(0,3))\n\nprint('[-] Time benchmark over.')\nprint()\nprint('-*- Results -*-')\nprint(f'Ran {test_round} rounds for {data_size} items.')\nfor item in time_data.items():\n    print(f'file {item[0]} average run time: {int(item[1] / test_round)} ms.')\n</code></pre> <p>\u6240\u6709\u8f93\u5165\u8f93\u51fa\u90fd\u4f7f\u7528 <code>std::cin</code> \u548c <code>std::cout</code> \u8fdb\u884c\uff0c\u6d41\u540c\u6b65\u5df2\u7ecf\u5173\u95ed\u3002</p>"},{"location":"benchmark-on-stl/#stdvector-stdarray","title":"<code>std::vector</code>, <code>std::array</code> \u548c\u539f\u751f\u6570\u7ec4","text":"<p>\u672c\u8f6e\u6d4b\u8bd5\u4ee5\u4e0b\u9879\u76ee\uff1a</p> <ul> <li>\u5b58\u5165\u6570\u636e\u5e76\u8f93\u51fa</li> <li>\u968f\u673a\u8bbf\u95ee\u4e0b\u6807\u5e76\u6c42\u548c</li> <li>\u4f7f\u7528 <code>std::sort</code> \u6392\u5e8f</li> </ul>"},{"location":"benchmark-on-stl/#_2","title":"\u987a\u5e8f\u5b58\u50a8\u6d4b\u8bd5","text":"<p>\u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\uff1a</p>"},{"location":"benchmark-on-stl/#stdvector","title":"\u4f7f\u7528 <code>std::vector</code>","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n\nint main()\n{\n    std::vector&lt;int&gt; vec;\n    int n;\n    std::cin &gt;&gt; n;\n    while (n--) {\n        int x;\n        std::cin &gt;&gt; x;\n        vec.push_back(x);\n    }\n    long long sum = 0;\n    for(auto i : vec) {\n        std::cout &lt;&lt; i &lt;&lt; ' ';\n        sum += i;\n        sum %= 998244353;\n    }\n    std::cout &lt;&lt; sum &lt;&lt; '\\n';\n    for(auto it = vec.rbegin(); it != vec.rend(); ++it)\n        std::cout &lt;&lt; *it &lt;&lt; ' ';\n    return 0;\n}\n</code></pre>"},{"location":"benchmark-on-stl/#stdarray","title":"\u4f7f\u7528 <code>std::array</code>","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;array&gt;\nconstexpr int SIZE = int(1e8+5);\nstd::array&lt;int, SIZE&gt; arr;\n\nint main()\n{\n    int n;\n    std::cin &gt;&gt; n;\n    for(int i = 0; i &lt; n; ++i) {\n        int x;\n        std::cin &gt;&gt; x;\n        arr[i] = x;\n    }\n    long long sum = 0;\n    for(int i = 0; i &lt; n; ++i) {\n        std::cout &lt;&lt; arr[i] &lt;&lt; ' ';\n        sum += arr[i];\n        sum %= 998244353;\n    }\n    std::cout &lt;&lt; sum &lt;&lt; '\\n';\n    for(int i = n - 1; i &gt;= 0; --i)\n        std::cout &lt;&lt; arr[i] &lt;&lt; ' ';\n    return 0;\n}\n</code></pre>"},{"location":"benchmark-on-stl/#_3","title":"\u4f7f\u7528\u539f\u751f\u6570\u7ec4","text":"<pre><code>#include&lt;iostream&gt;\nconstexpr int SIZE = int(1e8+5);\nint arr[SIZE];\n\nint main()\n{\n    int n;\n    std::cin &gt;&gt; n;\n    for(int i = 0; i &lt; n; ++i) {\n        int x;\n        std::cin &gt;&gt; x;\n        arr[i] = x;\n    }\n    long long sum = 0;\n    for(int i = 0; i &lt; n; ++i) {\n        std::cout &lt;&lt; arr[i] &lt;&lt; ' ';\n        sum += arr[i];\n        sum %= 998244353;\n    }\n    std::cout &lt;&lt; sum &lt;&lt; '\\n';\n    for(int i = n - 1; i &gt;= 0; --i)\n        std::cout &lt;&lt; arr[i] &lt;&lt; ' ';\n    return 0;\n}\n</code></pre>"},{"location":"benchmark-on-stl/#_4","title":"\u968f\u673a\u8bbf\u95ee\u6d4b\u8bd5","text":""},{"location":"benchmark-on-stl/#stdvector_1","title":"\u4f7f\u7528 <code>std::vector</code>","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;random&gt;\n\nint main()\n{\n    std::random_device device;\n    unsigned int seed = device();\n    std::mt19937 engine(seed);\n    std::vector&lt;int&gt; vec;\n    int n, m;\n    std::cin &gt;&gt; n;\n    m = n;\n    while (n--) {\n        int x;\n        std::cin &gt;&gt; x;\n        vec.push_back(x);\n    }\n    long long sum = 0;\n    for(int _ = 0; _ &lt; m ; ++_) {\n        auto i = vec[engine() % m];\n        sum += i;\n        sum %= 998244353;\n    }\n    std::cout &lt;&lt; sum;\n    return 0;\n}\n</code></pre>"},{"location":"benchmark-on-stl/#stdarray_1","title":"\u4f7f\u7528 <code>std::array</code>","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;array&gt;\n#include&lt;random&gt;\n\nconstexpr size_t SIZE = 1e6+5;\nstd::array&lt;int, SIZE&gt; vec;\nint main()\n{\n    std::random_device device;\n    unsigned int seed = device();\n    std::mt19937 engine(seed);\n    int n, m;\n    std::cin &gt;&gt; n;\n    m = n;\n    for(int i = 0; i &lt; n; ++i) {\n        int x;\n        std::cin &gt;&gt; x;\n        vec[i] = x;\n    }\n    long long sum = 0;\n    for(int _ = 0; _ &lt; m ; ++_) {\n        auto i = vec[engine() % m];\n        sum += i;\n        sum %= 998244353;\n    }\n    std::cout &lt;&lt; sum;\n    return 0;\n}\n</code></pre>"},{"location":"benchmark-on-stl/#_5","title":"\u4f7f\u7528\u539f\u751f\u6570\u7ec4","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;array&gt;\n#include&lt;random&gt;\n\nconstexpr size_t SIZE = 1e6+5;\nint vec[SIZE];\nint main()\n{\n    std::random_device device;\n    unsigned int seed = device();\n    std::mt19937 engine(seed);\n    int n, m;\n    std::cin &gt;&gt; n;\n    m = n;\n    for(int i = 0; i &lt; n; ++i) {\n        int x;\n        std::cin &gt;&gt; x;\n        vec[i] = x;\n    }\n    long long sum = 0;\n    for(int _ = 0; _ &lt; m ; ++_) {\n        auto i = vec[engine() % m];\n        sum += i;\n        sum %= 998244353;\n    }\n    std::cout &lt;&lt; sum;\n    return 0;\n}\n</code></pre>"},{"location":"benchmark-on-stl/#_6","title":"\u7ed3\u679c\u548c\u5206\u6790","text":"<pre><code>-*- Results -*-\nRan 50 rounds for 1000 items.\nfile a_gcc average run time: 114.56 \u00b1 44.77 ms (39.083%).\nfile b_gcc average run time: 114.82 \u00b1 47.26 ms (41.157%).\nfile c_gcc average run time: 109.58 \u00b1 32.59 ms (29.745%).\nfile a_clang average run time: 63.96 \u00b1 71.77 ms (112.212%).\nfile b_clang average run time: 56.38 \u00b1 44.58 ms (79.077%).\nfile c_clang average run time: 61.92 \u00b1 49.93 ms (80.635%).\n\n-*- Results -*-\nRan 50 rounds for 100000 items.\nfile a_gcc average run time: 415.8 \u00b1 51.44 ms (12.37%).\nfile b_gcc average run time: 420.12 \u00b1 51.33 ms (12.218%).\nfile c_gcc average run time: 425.22 \u00b1 59.65 ms (14.028%).\nfile a_clang average run time: 351.1 \u00b1 52.09 ms (14.835%).\nfile b_clang average run time: 353.44 \u00b1 51.66 ms (14.615%).\nfile c_clang average run time: 352.08 \u00b1 49.55 ms (14.074%).\n\n-*- Results -*-\nRan 20 rounds for 1000000 items.\nfile a_gcc average run time: 3383.9 \u00b1 306.06 ms (9.045%).\nfile b_gcc average run time: 3349.85 \u00b1 397.41 ms (11.864%).\nfile c_gcc average run time: 3346.3 \u00b1 306.4 ms (9.156%).\nfile a_clang average run time: 3186.65 \u00b1 296.0 ms (9.289%).\nfile b_clang average run time: 3225.5 \u00b1 329.33 ms (10.21%).\nfile c_clang average run time: 3218.15 \u00b1 303.94 ms (9.445%).\n</code></pre> <pre><code>-*- Results -*-\nRan 50 rounds for 1000 items.\nfile a_gcc average run time: 90.12 \u00b1 26.23 ms (29.107%).\nfile b_gcc average run time: 88.26 \u00b1 13.46 ms (15.254%).\nfile c_gcc average run time: 86.8 \u00b1 15.66 ms (18.044%).\nfile a_clang average run time: 32.16 \u00b1 22.44 ms (69.763%).\nfile b_clang average run time: 28.6 \u00b1 12.94 ms (45.254%).\nfile c_clang average run time: 30.24 \u00b1 14.96 ms (49.455%).\n\n-*- Results -*-\nRan 50 rounds for 100000 items.\nfile a_gcc average run time: 336.48 \u00b1 21.05 ms (6.257%).\nfile b_gcc average run time: 334.84 \u00b1 14.22 ms (4.246%).\nfile c_gcc average run time: 340.24 \u00b1 18.11 ms (5.323%).\nfile a_clang average run time: 171.8 \u00b1 16.36 ms (9.524%).\nfile b_clang average run time: 171.64 \u00b1 14.08 ms (8.202%).\nfile c_clang average run time: 171.5 \u00b1 13.84 ms (8.071%).\n\n-*- Results -*-\nRan 20 rounds for 1000000 items.\nfile a_gcc average run time: 3029.5 \u00b1 397.96 ms (13.136%).\nfile b_gcc average run time: 2998.55 \u00b1 339.45 ms (11.321%).\nfile c_gcc average run time: 2968.05 \u00b1 257.55 ms (8.677%).\nfile a_clang average run time: 1614.05 \u00b1 114.01 ms (7.064%).\nfile b_clang average run time: 1641.65 \u00b1 185.24 ms (11.284%).\nfile c_clang average run time: 1641.5 \u00b1 146.92 ms (8.95%).\n</code></pre> <pre><code>-*- Results -*-\nRan 50 rounds for 1000 items.\nfile a_gcc average run time: 82.18 \u00b1 15.84 ms (19.279%).\nfile b_gcc average run time: 87.38 \u00b1 20.09 ms (22.997%).\nfile c_gcc average run time: 85.56 \u00b1 20.65 ms (24.14%).\nfile a_clang average run time: 22.98 \u00b1 13.12 ms (57.088%).\nfile b_clang average run time: 25.1 \u00b1 13.76 ms (54.824%).\nfile c_clang average run time: 29.16 \u00b1 22.7 ms (77.836%).\n\n-*- Results -*-\nRan 50 rounds for 100000 items.\nfile a_gcc average run time: 348.94 \u00b1 40.78 ms (11.686%).\nfile b_gcc average run time: 348.36 \u00b1 35.0 ms (10.048%).\nfile c_gcc average run time: 345.16 \u00b1 38.33 ms (11.105%).\nfile a_clang average run time: 170.74 \u00b1 19.72 ms (11.552%).\nfile b_clang average run time: 176.56 \u00b1 25.44 ms (14.411%).\nfile c_clang average run time: 174.12 \u00b1 21.54 ms (12.369%).\n\n-*- Results -*-\nRan 20 rounds for 1000000 items.\nfile a_gcc average run time: 2923.05 \u00b1 241.33 ms (8.256%).\nfile b_gcc average run time: 2978.0 \u00b1 278.09 ms (9.338%).\nfile c_gcc average run time: 2990.55 \u00b1 287.74 ms (9.622%).\nfile a_clang average run time: 1619.85 \u00b1 148.65 ms (9.177%).\nfile b_clang average run time: 1602.1 \u00b1 137.03 ms (8.553%).\nfile c_clang average run time: 1648.2 \u00b1 238.51 ms (14.471%).\n</code></pre> <p>\u6ce8\u610f\u8fd9\u91cc<code>gcc</code>\u548c<code>clang</code>\u6709\u4e00\u5b9a\u7684I/O\u6027\u80fd\u5dee\u8ddd\uff0c\u4f46\u662f\u5bb9\u5668\u672c\u8eab\u7684\u7528\u65f6\u5dee\u8ddd\u4e0d\u5927\uff0c\u751a\u81f3\u6ca1\u6709\u56e0\u4e3a\u6027\u80fd\u6ce2\u52a8\u5bfc\u81f4\u7684\u65f6\u95f4\u5dee\u5927\u3002</p> <p>\u7ed3\u8bba\uff1a\u8fde\u7eed\u8bbf\u95ee\u60c5\u5f62\uff0c\u5404\u4e2a\u5bb9\u5668\u7684\u6027\u80fd\u57fa\u672c\u6ca1\u6709\u5dee\u522b\uff0c\u56e0\u4e3a\u8fd9\u4e09\u4e2a\u5bb9\u5668\u5e95\u5c42\u90fd\u662f\u8fde\u7eed\u7684\u5185\u5b58\u5757\uff0c\u62bd\u8c61\u7684\u65f6\u95f4\u6210\u672c\u975e\u5e38\u4f4e\u3002\u4f46\u662f\u8003\u8651\u5230\u6570\u7ec4\u5e76\u4e0d\u662f\u4e00\u4e2a\u5f88\u201c\u7c7b\u578b\u201d\u7684\u7c7b\u578b\uff08\u6bd4\u5982\u8fd9\u4e2a\uff09\uff0c\u8fd8\u662f\u66f4\u63a8\u8350\u4f7f\u7528 <code>std::array</code> \u548c <code>std::vector</code> \u3002</p> <p>\u7531\u4e8e <code>std::vector</code> \u662f\u6307\u6570\u6269\u5bb9\uff0c\u5747\u644a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u5e38\u6570\u7ea7\u3002\u4e00\u822c <code>std::vector</code> \u6269\u5bb9\u7684\u573a\u5408\u90fd\u662f\u5728\u8bfb\u5165\u9636\u6bb5\uff0c\u6240\u4ee5\u6027\u80fd\u5f00\u9500\u4e5f\u4e0d\u5927\u3002</p> <p>\u5f53\u7136 <code>std::array</code> \u5c31\u662f\u539f\u751f\u6570\u7ec4\u5f88\u7ecf\u5178\u7684\u96f6\u6210\u672c\u62bd\u8c61\u4e86\u3002</p>"},{"location":"test/","title":"\u529f\u80fd\u6d4b\u8bd5\u9875\u9762","text":"<p>\u4ee3\u7801\u5757\uff1a</p> <pre><code>auto index = static_cast&lt;int&gt;(std::distance(vec.begin(), std::lower_bound(vec.begin(), vec.end(), val));\n</code></pre> <p>\u516c\u5f0f\uff1a</p> <p>$$ \\sum^n_{i = 1}\\dfrac{1}{i^2} = \\dfrac{\\pi^2}{6} $$</p>"}]}